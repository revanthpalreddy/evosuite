/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 18:03:52 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(2);
      aVLTree0.insert(0);
      aVLTree0.delete(2065);
      aVLTree0.delete(536);
      aVLTree0.insert((-4004));
      aVLTree0.delete(536);
      aVLTree0.height();
      aVLTree0.insert(293);
      aVLTree0.find((-1057));
      aVLTree0.insert((-895));
      aVLTree0.insert((-2823));
      aVLTree0.find(536);
      aVLTree0.delete((-1058));
      aVLTree0.find(1);
      aVLTree0.find((-1563));
      aVLTree0.getRoot();
      aVLTree0.insert(1);
      aVLTree0.find(2);
      aVLTree0.delete(1);
      aVLTree0.getRoot();
      aVLTree0.find(0);
      aVLTree0.delete(0);
      aVLTree0.find(0);
      aVLTree0.find((-310));
      aVLTree0.find((-357));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      aVLTree0.insert(0);
      int int1 = (-1779);
      aVLTree0.delete((-1779));
      int int2 = (-2395);
      aVLTree0.delete((-2395));
      aVLTree0.delete((-2395));
      int int3 = 340;
      aVLTree0.delete((-2395));
      aVLTree0.insert(340);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree0.insert(520);
      aVLTree_Node0.left = aVLTree_Node1;
      // Undeclared exception!
      try { 
        aVLTree0.delete(int2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      aVLTree0.getBalance(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(577);
      aVLTree0.delete(1263);
      aVLTree0.insert((-229));
      aVLTree0.getRoot();
      aVLTree0.insert(2058);
      aVLTree0.height();
      aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2175);
      aVLTree0.height();
      int int0 = 0;
      aVLTree0.delete(0);
      aVLTree0.insert(1);
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.insert((-1332));
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.left = aVLTree_Node1;
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      aVLTree_Node2.left = aVLTree_Node0;
      aVLTree_Node0.left.right = aVLTree_Node2.left;
      aVLTree_Node2.right = aVLTree_Node0;
      aVLTree_Node1.height = 0;
      int int1 = 4053;
      // Undeclared exception!
      try { 
        aVLTree0.insert(int1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1991);
      aVLTree0.insert(1991);
      aVLTree0.delete(1991);
      aVLTree0.insert(1991);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.insert((-1));
      aVLTree0.find((-1));
      aVLTree0.delete(1991);
      aVLTree0.find((-1));
      aVLTree0.find((-1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      aVLTree0.insert((-2098));
      aVLTree0.delete((-2098));
      aVLTree0.height();
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.find(0);
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getBalance(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1);
      aVLTree_Node0.key = 0;
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(0);
      aVLTree_Node0.left = aVLTree_Node1;
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node2;
      aVLTree0.height();
      aVLTree_Node0.height = 1;
      aVLTree0.find(1);
      aVLTree_Node0.left = null;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.height();
      int int0 = 0;
      aVLTree0.find(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-459));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1));
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      int int0 = 1778;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.height = 0;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = (-4476);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1782);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1778);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = (-2575);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.right = aVLTree_Node0;
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertFalse(int1 == int0);
      assertEquals((-2), int1);
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.left = aVLTree_Node0.left;
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertEquals((-2), int2);
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      aVLTree0.find((-2575));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = 0;
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      int int1 = (-1779);
      aVLTree0.delete((-1779));
      assertEquals(0, aVLTree0.height());
      
      int int2 = (-2395);
      aVLTree0.delete((-2395));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-2395));
      assertEquals(0, aVLTree0.height());
      
      int int3 = 0;
      aVLTree0.delete((-2395));
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1860));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1860));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-2744));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1860));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-2403));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-45));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(940);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1105));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      int int0 = (-3347);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-2455));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1658));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1658));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1658));
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.height();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-556));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-304));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-304));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-686));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete((-304));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(2920);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(122);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-2667));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-2135));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-3235));
      assertNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-3537));
      int int0 = (-1);
      aVLTree0.delete((-1));
      aVLTree0.insert(289);
      aVLTree0.insert((-1));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-3537));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(2);
      aVLTree0.insert(0);
      aVLTree0.delete(2065);
      aVLTree0.delete(536);
      aVLTree0.delete(536);
      aVLTree0.height();
      aVLTree0.insert(128);
      aVLTree0.insert(2065);
      aVLTree0.delete((-895));
      aVLTree0.insert((-895));
      aVLTree0.insert((-2823));
      aVLTree0.find(536);
      aVLTree0.find(0);
      aVLTree0.find((-1563));
      aVLTree0.insert(1);
      aVLTree0.find(2682);
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.find(0);
      aVLTree0.delete(0);
      aVLTree0.find(0);
      aVLTree0.find(2);
      aVLTree0.find(0);
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      aVLTree0.getBalance((AVLTree.Node) null);
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int0);
  }
}
